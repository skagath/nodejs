name: Deploy Node.js App to EC2 via Docker and ECR

on:
  push:
    branches:
      - main  # Trigger the workflow when pushing to the main branch

jobs:
  build:
    runs-on: ubuntu-latest
    environment: AWS
    steps:
      # Checkout code from GitHub
      - name: Checkout code 
        uses: actions/checkout@v2

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # or use ${{ secrets.AWS_REGION }}

      # Set IMAGE_TAG environment variable for the Docker image tag
      - name: Set IMAGE_TAG environment variable
        run: echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

      # Build Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.ECR_REPO_URI }}/${{ secrets.ECR_REPO }}:${{ env.IMAGE_TAG }} .

      # Log in to Amazon ECR
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REPO_URI }}

      # Push Docker image to ECR
      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_REPO_URI }}/${{ secrets.ECR_REPO }}:${{ env.IMAGE_TAG }}

  deploy:
    needs: build
    runs-on: [self-hosted, Linux, X64]
  
    steps:
      # SSH into EC2 and pull Docker image
      - name: Deploy Dockerized app to EC2
        run: |
          echo "Deploying to EC2"
          docker pull "${{ secrets.ECR_REPO_URI }}/${{ secrets.ECR_REPO }}:${{ env.IMAGE_TAG }}"
          docker run -d --name node-app -p 80:80 "${{ secrets.ECR_REPO_URI }}/${{ secrets.ECR_REPO }}:${{ env.IMAGE_TAG }}"
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
